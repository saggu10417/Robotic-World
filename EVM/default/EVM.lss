
EVM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000005fa  0000066e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000006ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a6  00000000  00000000  000006ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c33  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000033f  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000835  00000000  00000000  00001706  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00001f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000182  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000630  00000000  00000000  0000215e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  0000278e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000054 <__c.1397>:
  54:	44 3d 00                                            D=.

00000057 <__c.1395>:
  57:	43 3d 00                                            C=.

0000005a <__c.1393>:
  5a:	42 3d 00                                            B=.

0000005d <__c.1391>:
  5d:	41 3d 00                                            A=.

00000060 <__c.1389>:
  60:	59 4f 55 20 43 48 4f 53 45 20 44 00                 YOU CHOSE D.

0000006c <__c.1387>:
  6c:	59 4f 55 20 43 48 4f 53 45 20 43 00                 YOU CHOSE C.

00000078 <__c.1385>:
  78:	59 4f 55 20 43 48 4f 53 45 20 42 00                 YOU CHOSE B.

00000084 <__c.1383>:
  84:	59 4f 55 20 43 48 4f 53 45 20 41 00                 YOU CHOSE A.

00000090 <__c.1381>:
  90:	57 45 4c 43 4f 4d 45 00                             WELCOME.

00000098 <__c.1379>:
  98:	56 4f 54 49 4e 47 20 4d 41 43 48 49 4e 45 00        VOTING MACHINE.

000000a7 <__c.1377>:
  a7:	45 4c 45 43 54 52 4f 4e 49 43 00                    ELECTRONIC.

000000b2 <__ctors_end>:
  b2:	11 24       	eor	r1, r1
  b4:	1f be       	out	0x3f, r1	; 63
  b6:	cf e5       	ldi	r28, 0x5F	; 95
  b8:	d4 e0       	ldi	r29, 0x04	; 4
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
  be:	10 e0       	ldi	r17, 0x00	; 0
  c0:	a0 e6       	ldi	r26, 0x60	; 96
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	ea ef       	ldi	r30, 0xFA	; 250
  c6:	f5 e0       	ldi	r31, 0x05	; 5
  c8:	02 c0       	rjmp	.+4      	; 0xce <.do_copy_data_start>

000000ca <.do_copy_data_loop>:
  ca:	05 90       	lpm	r0, Z+
  cc:	0d 92       	st	X+, r0

000000ce <.do_copy_data_start>:
  ce:	a0 3a       	cpi	r26, 0xA0	; 160
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <.do_copy_data_loop>
  d4:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  d8:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <main>:
#include <util/delay.h>

#include "lcd_hd44780_avr.h"

int main(void)
{
  e0:	9f 92       	push	r9
  e2:	af 92       	push	r10
  e4:	bf 92       	push	r11
  e6:	cf 92       	push	r12
  e8:	df 92       	push	r13
  ea:	ef 92       	push	r14
  ec:	ff 92       	push	r15
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
DDRA=0x0f;
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	8a bb       	out	0x1a, r24	; 26
DDRD=0x00;
  fa:	11 ba       	out	0x11, r1	; 17
int i,j,k,l;
LCDInit(LS_NONE);
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 cb 01 	call	0x396	; 0x396 <LCDInit>
 102:	84 ef       	ldi	r24, 0xF4	; 244
 104:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 106:	20 e9       	ldi	r18, 0x90	; 144
 108:	31 e0       	ldi	r19, 0x01	; 1
 10a:	f9 01       	movw	r30, r18
 10c:	31 97       	sbiw	r30, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x2c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 110:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 112:	d9 f7       	brne	.-10     	; 0x10a <main+0x2a>
_delay_ms(50);
LCDClear();
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
LCDWriteFStringXY(2,0,PSTR("ELECTRONIC"));
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 124:	87 ea       	ldi	r24, 0xA7	; 167
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 32 02 	call	0x464	; 0x464 <LCDWriteFString>
LCDWriteFStringXY(0,1,PSTR("VOTING MACHINE"));
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 134:	88 e9       	ldi	r24, 0x98	; 152
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 32 02 	call	0x464	; 0x464 <LCDWriteFString>
 13c:	84 ef       	ldi	r24, 0xF4	; 244
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	20 e9       	ldi	r18, 0x90	; 144
 142:	31 e0       	ldi	r19, 0x01	; 1
 144:	f9 01       	movw	r30, r18
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 14c:	d9 f7       	brne	.-10     	; 0x144 <main+0x64>
_delay_ms(50);
LCDClear();
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
 156:	c0 e9       	ldi	r28, 0x90	; 144
 158:	d1 e0       	ldi	r29, 0x01	; 1
_delay_ms(20);
k++;
}
if(PIND==0b00011000) //D SELECTION
{
PORTA=0b00000010;
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	98 2e       	mov	r9, r24
LCDWriteFStringXY(0,1,PSTR("VOTING MACHINE"));
_delay_ms(50);
LCDClear();
while(1)
{
if(PIND==0b00010000)//TOGGLE MASTER
 15e:	80 b3       	in	r24, 0x10	; 16
 160:	80 31       	cpi	r24, 0x10	; 16
 162:	09 f0       	breq	.+2      	; 0x166 <main+0x86>
 164:	6c c0       	rjmp	.+216    	; 0x23e <main+0x15e>
{
LCDClear();
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
LCDWriteFStringXY(4,0,PSTR("WELCOME"));
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 176:	80 e9       	ldi	r24, 0x90	; 144
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 32 02 	call	0x464	; 0x464 <LCDWriteFString>
	
PORTA=0b00000001;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	8b bb       	out	0x1b, r24	; 27
 182:	88 ec       	ldi	r24, 0xC8	; 200
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	fe 01       	movw	r30, r28
 188:	31 97       	sbiw	r30, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0xa8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 18e:	d9 f7       	brne	.-10     	; 0x186 <main+0xa6>
_delay_ms(20);
if(PIND==0b00010001) //A SELECTION
 190:	80 b3       	in	r24, 0x10	; 16
 192:	81 31       	cpi	r24, 0x11	; 17
 194:	99 f4       	brne	.+38     	; 0x1bc <main+0xdc>
{
PORTA=0b00000010;
 196:	9b ba       	out	0x1b, r9	; 27
LCDWriteFStringXY(0,0,PSTR("YOU CHOSE A"));
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 1a0:	84 e8       	ldi	r24, 0x84	; 132
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 32 02 	call	0x464	; 0x464 <LCDWriteFString>
 1a8:	88 e8       	ldi	r24, 0x88	; 136
 1aa:	93 e1       	ldi	r25, 0x13	; 19
 1ac:	fe 01       	movw	r30, r28
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b4:	d9 f7       	brne	.-10     	; 0x1ac <main+0xcc>
_delay_ms(500);
i++;
 1b6:	08 94       	sec
 1b8:	a1 1c       	adc	r10, r1
 1ba:	b1 1c       	adc	r11, r1
}
if(PIND==0b00010010)//B SELECTION
 1bc:	80 b3       	in	r24, 0x10	; 16
 1be:	82 31       	cpi	r24, 0x12	; 18
 1c0:	99 f4       	brne	.+38     	; 0x1e8 <main+0x108>
{
PORTA=0b00000010;
 1c2:	9b ba       	out	0x1b, r9	; 27
LCDWriteFStringXY(0,0,PSTR("YOU CHOSE B"));
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 1cc:	88 e7       	ldi	r24, 0x78	; 120
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 32 02 	call	0x464	; 0x464 <LCDWriteFString>
 1d4:	88 ec       	ldi	r24, 0xC8	; 200
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	fe 01       	movw	r30, r28
 1da:	31 97       	sbiw	r30, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1e0:	d9 f7       	brne	.-10     	; 0x1d8 <main+0xf8>
_delay_ms(20);
j++;
 1e2:	08 94       	sec
 1e4:	c1 1c       	adc	r12, r1
 1e6:	d1 1c       	adc	r13, r1
}
if(PIND==0b00010100) //C SELECTION
 1e8:	80 b3       	in	r24, 0x10	; 16
 1ea:	84 31       	cpi	r24, 0x14	; 20
 1ec:	99 f4       	brne	.+38     	; 0x214 <main+0x134>
{
PORTA=0b00000010;
 1ee:	9b ba       	out	0x1b, r9	; 27
LCDWriteFStringXY(0,0,PSTR("YOU CHOSE C"));
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 1f8:	8c e6       	ldi	r24, 0x6C	; 108
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 32 02 	call	0x464	; 0x464 <LCDWriteFString>
 200:	88 ec       	ldi	r24, 0xC8	; 200
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	fe 01       	movw	r30, r28
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0x126>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 20a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 20c:	d9 f7       	brne	.-10     	; 0x204 <main+0x124>
_delay_ms(20);
k++;
 20e:	08 94       	sec
 210:	e1 1c       	adc	r14, r1
 212:	f1 1c       	adc	r15, r1
}
if(PIND==0b00011000) //D SELECTION
 214:	80 b3       	in	r24, 0x10	; 16
 216:	88 31       	cpi	r24, 0x18	; 24
 218:	91 f4       	brne	.+36     	; 0x23e <main+0x15e>
{
PORTA=0b00000010;
 21a:	9b ba       	out	0x1b, r9	; 27
LCDWriteFStringXY(0,0,PSTR("YOU CHOSE D"));
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 224:	80 e6       	ldi	r24, 0x60	; 96
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 32 02 	call	0x464	; 0x464 <LCDWriteFString>
 22c:	88 ec       	ldi	r24, 0xC8	; 200
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	fe 01       	movw	r30, r28
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0x152>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 236:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 238:	d9 f7       	brne	.-10     	; 0x230 <main+0x150>
_delay_ms(20);
l++;
 23a:	0f 5f       	subi	r16, 0xFF	; 255
 23c:	1f 4f       	sbci	r17, 0xFF	; 255
}
}
if(PIND==0b00100000)
 23e:	80 b3       	in	r24, 0x10	; 16
 240:	80 32       	cpi	r24, 0x20	; 32
 242:	09 f0       	breq	.+2      	; 0x246 <main+0x166>
 244:	8c cf       	rjmp	.-232    	; 0x15e <main+0x7e>
{
LCDClear();
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
LCDWriteFStringXY(0,0,PSTR("A="));
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 256:	8d e5       	ldi	r24, 0x5D	; 93
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 32 02 	call	0x464	; 0x464 <LCDWriteFString>
LCDWriteIntXY(2,0,i,3);
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 266:	c5 01       	movw	r24, r10
 268:	63 e0       	ldi	r22, 0x03	; 3
 26a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCDWriteInt>
LCDWriteFStringXY(9,0,PSTR("B="));
 26e:	89 e0       	ldi	r24, 0x09	; 9
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 276:	8a e5       	ldi	r24, 0x5A	; 90
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 32 02 	call	0x464	; 0x464 <LCDWriteFString>
LCDWriteIntXY(11,0,j,3);
 27e:	8b e0       	ldi	r24, 0x0B	; 11
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 286:	c6 01       	movw	r24, r12
 288:	63 e0       	ldi	r22, 0x03	; 3
 28a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCDWriteInt>
LCDWriteFStringXY(0,1,PSTR("C="));
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 296:	87 e5       	ldi	r24, 0x57	; 87
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 32 02 	call	0x464	; 0x464 <LCDWriteFString>
LCDWriteIntXY(2,1,k,3);
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 2a6:	c7 01       	movw	r24, r14
 2a8:	63 e0       	ldi	r22, 0x03	; 3
 2aa:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCDWriteInt>
LCDWriteFStringXY(9,1,PSTR("D="));
 2ae:	89 e0       	ldi	r24, 0x09	; 9
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 2b6:	84 e5       	ldi	r24, 0x54	; 84
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 32 02 	call	0x464	; 0x464 <LCDWriteFString>
LCDWriteIntXY(11,1,l,3);
 2be:	8b e0       	ldi	r24, 0x0B	; 11
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	0e 94 c2 02 	call	0x584	; 0x584 <LCDGotoXY>
 2c6:	c8 01       	movw	r24, r16
 2c8:	63 e0       	ldi	r22, 0x03	; 3
 2ca:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCDWriteInt>
 2ce:	88 ec       	ldi	r24, 0xC8	; 200
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	fe 01       	movw	r30, r28
 2d4:	31 97       	sbiw	r30, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <main+0x1f4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2da:	d9 f7       	brne	.-10     	; 0x2d2 <main+0x1f2>
 2dc:	40 cf       	rjmp	.-384    	; 0x15e <main+0x7e>

000002de <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
 2de:	87 b3       	in	r24, 0x17	; 23
 2e0:	87 78       	andi	r24, 0x87	; 135
 2e2:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
 2e4:	c1 9a       	sbi	0x18, 1	; 24
	CLEAR_RS();		//Read status
 2e6:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	8a 95       	dec	r24
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 2ee:	22 e0       	ldi	r18, 0x02	; 2
 2f0:	35 e0       	ldi	r19, 0x05	; 5
 2f2:	c2 9a       	sbi	0x18, 2	; 24
 2f4:	82 2f       	mov	r24, r18
 2f6:	8a 95       	dec	r24
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 2fa:	86 b3       	in	r24, 0x16	; 22
 2fc:	86 95       	lsr	r24
 2fe:	86 95       	lsr	r24
 300:	86 95       	lsr	r24
		status=status<<4;
 302:	82 95       	swap	r24
 304:	80 7f       	andi	r24, 0xF0	; 240
 306:	92 2f       	mov	r25, r18
 308:	9a 95       	dec	r25
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCDBusyLoop+0x2a>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 30c:	c2 98       	cbi	0x18, 2	; 24
 30e:	93 2f       	mov	r25, r19
 310:	9a 95       	dec	r25
 312:	f1 f7       	brne	.-4      	; 0x310 <LCDBusyLoop+0x32>
		_delay_us(1);	//tEL

		SET_E();
 314:	c2 9a       	sbi	0x18, 2	; 24
 316:	92 2f       	mov	r25, r18
 318:	9a 95       	dec	r25
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCDBusyLoop+0x3a>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 31c:	96 b3       	in	r25, 0x16	; 22
 31e:	92 2f       	mov	r25, r18
 320:	9a 95       	dec	r25
 322:	f1 f7       	brne	.-4      	; 0x320 <LCDBusyLoop+0x42>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 324:	c2 98       	cbi	0x18, 2	; 24
 326:	93 2f       	mov	r25, r19
 328:	9a 95       	dec	r25
 32a:	f1 f7       	brne	.-4      	; 0x328 <LCDBusyLoop+0x4a>
		_delay_us(1);	//tEL
	}while(busy);
 32c:	87 fd       	sbrc	r24, 7
 32e:	e1 cf       	rjmp	.-62     	; 0x2f2 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 330:	c1 98       	cbi	0x18, 1	; 24
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 332:	87 b3       	in	r24, 0x17	; 23
 334:	88 67       	ori	r24, 0x78	; 120
 336:	87 bb       	out	0x17, r24	; 23

}
 338:	08 95       	ret

0000033a <LCDByte>:
#ifdef LCD_TYPE_202
	#define LCD_TYPE_204
#endif

void LCDByte(uint8_t c,uint8_t isdata)
{
 33a:	28 2f       	mov	r18, r24
	uint8_t temp;

	hn=c>>4;
	ln=(c & 0x0F);

	if(isdata==0)
 33c:	66 23       	and	r22, r22
 33e:	11 f4       	brne	.+4      	; 0x344 <LCDByte+0xa>
		CLEAR_RS();
 340:	c0 98       	cbi	0x18, 0	; 24
 342:	01 c0       	rjmp	.+2      	; 0x346 <LCDByte+0xc>
	else
		SET_RS();
 344:	c0 9a       	sbi	0x18, 0	; 24
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	8a 95       	dec	r24
 34a:	f1 f7       	brne	.-4      	; 0x348 <LCDByte+0xe>

	_delay_us(0.500);		//tAS

	SET_E();
 34c:	c2 9a       	sbi	0x18, 2	; 24

	//Send high nibble

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 34e:	98 b3       	in	r25, 0x18	; 24
 350:	82 2f       	mov	r24, r18
 352:	82 95       	swap	r24
 354:	8f 70       	andi	r24, 0x0F	; 15
 356:	88 0f       	add	r24, r24
 358:	88 0f       	add	r24, r24
 35a:	88 0f       	add	r24, r24
 35c:	97 78       	andi	r25, 0x87	; 135
 35e:	89 2b       	or	r24, r25
	LCD_DATA_PORT=temp;
 360:	88 bb       	out	0x18, r24	; 24
 362:	95 e0       	ldi	r25, 0x05	; 5
 364:	89 2f       	mov	r24, r25
 366:	8a 95       	dec	r24
 368:	f1 f7       	brne	.-4      	; 0x366 <LCDByte+0x2c>

	_delay_us(1);			//tEH

	//Now data lines are stable pull E low for transmission

	CLEAR_E();
 36a:	c2 98       	cbi	0x18, 2	; 24
 36c:	89 2f       	mov	r24, r25
 36e:	8a 95       	dec	r24
 370:	f1 f7       	brne	.-4      	; 0x36e <LCDByte+0x34>

	_delay_us(1);

	//Send the lower nibble
	SET_E();
 372:	c2 9a       	sbi	0x18, 2	; 24

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 374:	88 b3       	in	r24, 0x18	; 24
 376:	2f 70       	andi	r18, 0x0F	; 15
 378:	22 0f       	add	r18, r18
 37a:	22 0f       	add	r18, r18
 37c:	22 0f       	add	r18, r18
 37e:	87 78       	andi	r24, 0x87	; 135
 380:	82 2b       	or	r24, r18

	LCD_DATA_PORT=temp;
 382:	88 bb       	out	0x18, r24	; 24
 384:	89 2f       	mov	r24, r25
 386:	8a 95       	dec	r24
 388:	f1 f7       	brne	.-4      	; 0x386 <LCDByte+0x4c>

	_delay_us(1);			//tEH

	//SEND

	CLEAR_E();
 38a:	c2 98       	cbi	0x18, 2	; 24
 38c:	9a 95       	dec	r25
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCDByte+0x52>

	_delay_us(1);			//tEL

	LCDBusyLoop();
 390:	0e 94 6f 01 	call	0x2de	; 0x2de <LCDBusyLoop>
}
 394:	08 95       	ret

00000396 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	18 2f       	mov	r17, r24
 39e:	88 ee       	ldi	r24, 0xE8	; 232
 3a0:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3a2:	20 e9       	ldi	r18, 0x90	; 144
 3a4:	31 e0       	ldi	r19, 0x01	; 1
 3a6:	f9 01       	movw	r30, r18
 3a8:	31 97       	sbiw	r30, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCDInit+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3ae:	d9 f7       	brne	.-10     	; 0x3a6 <LCDInit+0x10>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(100);
	
	//Clear Ports
	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 3b0:	88 b3       	in	r24, 0x18	; 24
 3b2:	87 78       	andi	r24, 0x87	; 135
 3b4:	88 bb       	out	0x18, r24	; 24
	
	CLEAR_E();
 3b6:	c2 98       	cbi	0x18, 2	; 24
	CLEAR_RW();
 3b8:	c1 98       	cbi	0x18, 1	; 24
	CLEAR_RS();
 3ba:	c0 98       	cbi	0x18, 0	; 24
	
	//Set IO Ports direction
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);	//data line direction
 3bc:	87 b3       	in	r24, 0x17	; 23
 3be:	88 67       	ori	r24, 0x78	; 120
 3c0:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);			//E line line direction
 3c2:	ba 9a       	sbi	0x17, 2	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);		//RS line direction
 3c4:	b8 9a       	sbi	0x17, 0	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);		//RW line direction
 3c6:	b9 9a       	sbi	0x17, 1	; 23
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	8a 95       	dec	r24
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCDInit+0x34>
	//Reset sequence END
	
	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 3ce:	c2 9a       	sbi	0x18, 2	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 3d0:	c4 9a       	sbi	0x18, 4	; 24
 3d2:	85 e0       	ldi	r24, 0x05	; 5
 3d4:	98 2f       	mov	r25, r24
 3d6:	9a 95       	dec	r25
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <LCDInit+0x40>
	_delay_us(1);
	CLEAR_E();
 3da:	c2 98       	cbi	0x18, 2	; 24
 3dc:	8a 95       	dec	r24
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCDInit+0x46>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3e0:	80 eb       	ldi	r24, 0xB0	; 176
 3e2:	94 e0       	ldi	r25, 0x04	; 4
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <LCDInit+0x4e>
	//LCDBusyLoop();                                    //[B] Forgot this delay
	_delay_us(300);

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 3e8:	88 e2       	ldi	r24, 0x28	; 40
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
	LCDCmd(0b00001000|style);	//Display Off
 3f0:	81 2f       	mov	r24, r17
 3f2:	88 60       	ori	r24, 0x08	; 8
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
	LCDCmd(0b00001100|style);	//Display On
 3fa:	81 2f       	mov	r24, r17
 3fc:	8c 60       	ori	r24, 0x0C	; 12
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 404:	80 e4       	ldi	r24, 0x40	; 64
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
 40c:	c0 e6       	ldi	r28, 0x60	; 96
 40e:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 410:	89 91       	ld	r24, Y+
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	c0 3a       	cpi	r28, 0xA0	; 160
 41c:	d8 07       	cpc	r29, r24
 41e:	c1 f7       	brne	.-16     	; 0x410 <LCDInit+0x7a>
		LCDData(__cgram[__i]);
	
	LCDClear();
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>

}
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	08 95       	ret

00000430 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	ec 01       	movw	r28, r24
 436:	10 c0       	rjmp	.+32     	; 0x458 <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 438:	85 32       	cpi	r24, 0x25	; 37
 43a:	51 f4       	brne	.+20     	; 0x450 <LCDWriteString+0x20>
	{
		msg++;
 43c:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 43e:	88 81       	ld	r24, Y
 440:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 442:	88 30       	cpi	r24, 0x08	; 8
 444:	28 f0       	brcs	.+10     	; 0x450 <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 446:	85 e2       	ldi	r24, 0x25	; 37
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
			LCDData(*msg);
 44e:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
	}
	msg++;
 456:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 458:	88 81       	ld	r24, Y
 45a:	88 23       	and	r24, r24
 45c:	69 f7       	brne	.-38     	; 0x438 <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <LCDWriteFString>:

void LCDWriteFString(const char *msg)
{
 464:	1f 93       	push	r17
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	ec 01       	movw	r28, r24
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 46c:	fc 01       	movw	r30, r24
 46e:	84 91       	lpm	r24, Z+
 470:	14 c0       	rjmp	.+40     	; 0x49a <LCDWriteFString+0x36>
 while(ch!='\0')
 {
 	//Custom Char Support
	if(ch=='%')
 472:	85 32       	cpi	r24, 0x25	; 37
 474:	61 f4       	brne	.+24     	; 0x48e <LCDWriteFString+0x2a>
	{
		msg++;
 476:	21 96       	adiw	r28, 0x01	; 1
		
		ch=pgm_read_byte(msg);
 478:	fe 01       	movw	r30, r28
 47a:	14 91       	lpm	r17, Z+
		
		int8_t cc=ch-'0';
 47c:	81 2f       	mov	r24, r17
 47e:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 480:	88 30       	cpi	r24, 0x08	; 8
 482:	28 f0       	brcs	.+10     	; 0x48e <LCDWriteFString+0x2a>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 484:	85 e2       	ldi	r24, 0x25	; 37
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
			LCDData(ch);
 48c:	81 2f       	mov	r24, r17
		}
	}
	else
	{
		LCDData(ch);
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
	}
	msg++;
 494:	21 96       	adiw	r28, 0x01	; 1
	ch=pgm_read_byte(msg);
 496:	fe 01       	movw	r30, r28
 498:	84 91       	lpm	r24, Z+


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 while(ch!='\0')
 49a:	88 23       	and	r24, r24
 49c:	51 f7       	brne	.-44     	; 0x472 <LCDWriteFString+0xe>
		LCDData(ch);
	}
	msg++;
	ch=pgm_read_byte(msg);
 }
}
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	08 95       	ret

000004a6 <LCDWriteInt>:

void LCDWriteInt(int val,int8_t field_length)
{
 4a6:	ef 92       	push	r14
 4a8:	ff 92       	push	r15
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	df 93       	push	r29
 4b0:	cf 93       	push	r28
 4b2:	00 d0       	rcall	.+0      	; 0x4b4 <LCDWriteInt+0xe>
 4b4:	00 d0       	rcall	.+0      	; 0x4b6 <LCDWriteInt+0x10>
 4b6:	0f 92       	push	r0
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	8c 01       	movw	r16, r24
 4be:	f6 2e       	mov	r15, r22

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	
	//Handle negative integers
	if(val<0)
 4c0:	97 ff       	sbrs	r25, 7
 4c2:	08 c0       	rjmp	.+16     	; 0x4d4 <LCDWriteInt+0x2e>
	{
		LCDData('-');   //Write Negative sign
 4c4:	8d e2       	ldi	r24, 0x2D	; 45
 4c6:	61 e0       	ldi	r22, 0x01	; 1
 4c8:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
		val=val*-1;     //convert to positive
 4cc:	10 95       	com	r17
 4ce:	01 95       	neg	r16
 4d0:	1f 4f       	sbci	r17, 0xFF	; 255
 4d2:	04 c0       	rjmp	.+8      	; 0x4dc <LCDWriteInt+0x36>
	}
	else
	{
		LCDData(' ');
 4d4:	80 e2       	ldi	r24, 0x20	; 32
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 4dc:	fe 01       	movw	r30, r28
 4de:	31 96       	adiw	r30, 0x01	; 1
 4e0:	85 e0       	ldi	r24, 0x05	; 5
 4e2:	df 01       	movw	r26, r30
 4e4:	1d 92       	st	X+, r1
 4e6:	8a 95       	dec	r24
 4e8:	e9 f7       	brne	.-6      	; 0x4e4 <LCDWriteInt+0x3e>
 4ea:	fe 01       	movw	r30, r28
 4ec:	35 96       	adiw	r30, 0x05	; 5
 4ee:	0d c0       	rjmp	.+26     	; 0x50a <LCDWriteInt+0x64>
		LCDData(' ');
	}
	
	while(val)
	{
		str[i]=val%10;
 4f0:	c8 01       	movw	r24, r16
 4f2:	6a e0       	ldi	r22, 0x0A	; 10
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divmodhi4>
 4fa:	80 83       	st	Z, r24
		val=val/10;
 4fc:	c8 01       	movw	r24, r16
 4fe:	6a e0       	ldi	r22, 0x0A	; 10
 500:	70 e0       	ldi	r23, 0x00	; 0
 502:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divmodhi4>
 506:	8b 01       	movw	r16, r22
 508:	31 97       	sbiw	r30, 0x01	; 1
	else
	{
		LCDData(' ');
	}
	
	while(val)
 50a:	01 15       	cp	r16, r1
 50c:	11 05       	cpc	r17, r1
 50e:	81 f7       	brne	.-32     	; 0x4f0 <LCDWriteInt+0x4a>
		str[i]=val%10;
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
 510:	bf ef       	ldi	r27, 0xFF	; 255
 512:	fb 16       	cp	r15, r27
 514:	81 f4       	brne	.+32     	; 0x536 <LCDWriteInt+0x90>
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 51a:	ae 01       	movw	r20, r28
 51c:	4f 5f       	subi	r20, 0xFF	; 255
 51e:	5f 4f       	sbci	r21, 0xFF	; 255
 520:	02 c0       	rjmp	.+4      	; 0x526 <LCDWriteInt+0x80>
 522:	2f 5f       	subi	r18, 0xFF	; 255
 524:	3f 4f       	sbci	r19, 0xFF	; 255
 526:	fa 01       	movw	r30, r20
 528:	e2 0f       	add	r30, r18
 52a:	f3 1f       	adc	r31, r19
 52c:	80 81       	ld	r24, Z
 52e:	88 23       	and	r24, r24
 530:	c1 f3       	breq	.-16     	; 0x522 <LCDWriteInt+0x7c>
 532:	89 01       	movw	r16, r18
 534:	08 c0       	rjmp	.+16     	; 0x546 <LCDWriteInt+0xa0>
	else
		j=5-field_length;
 536:	8f 2d       	mov	r24, r15
 538:	99 27       	eor	r25, r25
 53a:	87 fd       	sbrc	r24, 7
 53c:	90 95       	com	r25
 53e:	05 e0       	ldi	r16, 0x05	; 5
 540:	10 e0       	ldi	r17, 0x00	; 0
 542:	08 1b       	sub	r16, r24
 544:	19 0b       	sbc	r17, r25
 546:	7e 01       	movw	r14, r28
 548:	08 94       	sec
 54a:	e1 1c       	adc	r14, r1
 54c:	f1 1c       	adc	r15, r1
 54e:	e0 0e       	add	r14, r16
 550:	f1 1e       	adc	r15, r17
 552:	09 c0       	rjmp	.+18     	; 0x566 <LCDWriteInt+0xc0>

	for(i=j;i<5;i++)
	{
		LCDData('0'+str[i]);
 554:	f7 01       	movw	r30, r14
 556:	81 91       	ld	r24, Z+
 558:	7f 01       	movw	r14, r30
 55a:	80 5d       	subi	r24, 0xD0	; 208
 55c:	61 e0       	ldi	r22, 0x01	; 1
 55e:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
 562:	0f 5f       	subi	r16, 0xFF	; 255
 564:	1f 4f       	sbci	r17, 0xFF	; 255
 566:	05 30       	cpi	r16, 0x05	; 5
 568:	11 05       	cpc	r17, r1
 56a:	a4 f3       	brlt	.-24     	; 0x554 <LCDWriteInt+0xae>
	{
		LCDData('0'+str[i]);
	}
}
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	cf 91       	pop	r28
 578:	df 91       	pop	r29
 57a:	1f 91       	pop	r17
 57c:	0f 91       	pop	r16
 57e:	ff 90       	pop	r15
 580:	ef 90       	pop	r14
 582:	08 95       	ret

00000584 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 584:	84 31       	cpi	r24, 0x14	; 20
 586:	78 f4       	brcc	.+30     	; 0x5a6 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 588:	62 30       	cpi	r22, 0x02	; 2
 58a:	31 f0       	breq	.+12     	; 0x598 <LCDGotoXY+0x14>
 58c:	63 30       	cpi	r22, 0x03	; 3
 58e:	31 f0       	breq	.+12     	; 0x59c <LCDGotoXY+0x18>
 590:	61 30       	cpi	r22, 0x01	; 1
 592:	29 f4       	brne	.+10     	; 0x59e <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 594:	80 64       	ori	r24, 0x40	; 64
 596:	03 c0       	rjmp	.+6      	; 0x59e <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 598:	8c 5e       	subi	r24, 0xEC	; 236
 59a:	01 c0       	rjmp	.+2      	; 0x59e <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 59c:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 59e:	80 68       	ori	r24, 0x80	; 128
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	0e 94 9d 01 	call	0x33a	; 0x33a <LCDByte>
 5a6:	08 95       	ret

000005a8 <__divmodhi4>:
 5a8:	97 fb       	bst	r25, 7
 5aa:	09 2e       	mov	r0, r25
 5ac:	07 26       	eor	r0, r23
 5ae:	0a d0       	rcall	.+20     	; 0x5c4 <__divmodhi4_neg1>
 5b0:	77 fd       	sbrc	r23, 7
 5b2:	04 d0       	rcall	.+8      	; 0x5bc <__divmodhi4_neg2>
 5b4:	0c d0       	rcall	.+24     	; 0x5ce <__udivmodhi4>
 5b6:	06 d0       	rcall	.+12     	; 0x5c4 <__divmodhi4_neg1>
 5b8:	00 20       	and	r0, r0
 5ba:	1a f4       	brpl	.+6      	; 0x5c2 <__divmodhi4_exit>

000005bc <__divmodhi4_neg2>:
 5bc:	70 95       	com	r23
 5be:	61 95       	neg	r22
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255

000005c2 <__divmodhi4_exit>:
 5c2:	08 95       	ret

000005c4 <__divmodhi4_neg1>:
 5c4:	f6 f7       	brtc	.-4      	; 0x5c2 <__divmodhi4_exit>
 5c6:	90 95       	com	r25
 5c8:	81 95       	neg	r24
 5ca:	9f 4f       	sbci	r25, 0xFF	; 255
 5cc:	08 95       	ret

000005ce <__udivmodhi4>:
 5ce:	aa 1b       	sub	r26, r26
 5d0:	bb 1b       	sub	r27, r27
 5d2:	51 e1       	ldi	r21, 0x11	; 17
 5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <__udivmodhi4_ep>

000005d6 <__udivmodhi4_loop>:
 5d6:	aa 1f       	adc	r26, r26
 5d8:	bb 1f       	adc	r27, r27
 5da:	a6 17       	cp	r26, r22
 5dc:	b7 07       	cpc	r27, r23
 5de:	10 f0       	brcs	.+4      	; 0x5e4 <__udivmodhi4_ep>
 5e0:	a6 1b       	sub	r26, r22
 5e2:	b7 0b       	sbc	r27, r23

000005e4 <__udivmodhi4_ep>:
 5e4:	88 1f       	adc	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	5a 95       	dec	r21
 5ea:	a9 f7       	brne	.-22     	; 0x5d6 <__udivmodhi4_loop>
 5ec:	80 95       	com	r24
 5ee:	90 95       	com	r25
 5f0:	bc 01       	movw	r22, r24
 5f2:	cd 01       	movw	r24, r26
 5f4:	08 95       	ret

000005f6 <_exit>:
 5f6:	f8 94       	cli

000005f8 <__stop_program>:
 5f8:	ff cf       	rjmp	.-2      	; 0x5f8 <__stop_program>
