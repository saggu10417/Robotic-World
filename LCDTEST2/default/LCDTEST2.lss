
LCDTEST2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000043a  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000040  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a6  00000000  00000000  0000052e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a03  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000034e  00000000  00000000  00000fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000006bf  00000000  00000000  00001325  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  000019e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018c  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000476  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
   4:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   8:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
   c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  10:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  14:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  18:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  1c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  20:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  24:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  28:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  30:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  3c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  40:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  44:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  48:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  4c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>
  50:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__bad_interrupt>

00000054 <__c.1377>:
  54:	42 79 20 53 61 67 61 72 00                          By Sagar.

0000005d <__c.1375>:
  5d:	53 6d 61 72 74 20 50 61 72 6b 69 6e 67 20 53 79     Smart Parking Sy
  6d:	73 74 65 6d 00                                      stem.

00000072 <__c.1373>:
  72:	57 45 4c 43 4f 4d 45 20 54 4f 00 00                 WELCOME TO..

0000007e <__ctors_end>:
  7e:	11 24       	eor	r1, r1
  80:	1f be       	out	0x3f, r1	; 63
  82:	cf e5       	ldi	r28, 0x5F	; 95
  84:	d4 e0       	ldi	r29, 0x04	; 4
  86:	de bf       	out	0x3e, r29	; 62
  88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
  8a:	10 e0       	ldi	r17, 0x00	; 0
  8c:	a0 e6       	ldi	r26, 0x60	; 96
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	ea e3       	ldi	r30, 0x3A	; 58
  92:	f4 e0       	ldi	r31, 0x04	; 4
  94:	02 c0       	rjmp	.+4      	; 0x9a <.do_copy_data_start>

00000096 <.do_copy_data_loop>:
  96:	05 90       	lpm	r0, Z+
  98:	0d 92       	st	X+, r0

0000009a <.do_copy_data_start>:
  9a:	a0 3a       	cpi	r26, 0xA0	; 160
  9c:	b1 07       	cpc	r27, r17
  9e:	d9 f7       	brne	.-10     	; 0x96 <.do_copy_data_loop>
  a0:	0e 94 56 00 	call	0xac	; 0xac <main>
  a4:	0c 94 1b 02 	jmp	0x436	; 0x436 <_exit>

000000a8 <__bad_interrupt>:
  a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ac <main>:
#include <util/delay.h>

#include "lcd_hd44780_avr.h"

int main(void)
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
	LCDInit(LS_NONE);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCDInit>
  b6:	84 ef       	ldi	r24, 0xF4	; 244
  b8:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ba:	20 e9       	ldi	r18, 0x90	; 144
  bc:	31 e0       	ldi	r19, 0x01	; 1
  be:	f9 01       	movw	r30, r18
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c6:	d9 f7       	brne	.-10     	; 0xbe <main+0x12>
  c8:	c0 e9       	ldi	r28, 0x90	; 144
  ca:	d1 e0       	ldi	r29, 0x01	; 1
_delay_ms(50);
while(1){
	LCDWriteFString(PSTR("WELCOME TO"));
  cc:	82 e7       	ldi	r24, 0x72	; 114
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDWriteFString>
  d4:	84 ef       	ldi	r24, 0xF4	; 244
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	fe 01       	movw	r30, r28
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	d9 f7       	brne	.-10     	; 0xd8 <main+0x2c>
	_delay_ms(50);
LCDClear();
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>
 
 LCDWriteFString(PSTR("Smart Parking System"));
  ea:	8d e5       	ldi	r24, 0x5D	; 93
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDWriteFString>
  f2:	84 ef       	ldi	r24, 0xF4	; 244
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	fe 01       	movw	r30, r28
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fe:	d9 f7       	brne	.-10     	; 0xf6 <main+0x4a>
	_delay_ms(50);
LCDClear();
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>

	LCDWriteFStringXY(1,1,PSTR("By Sagar"));
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCDGotoXY>
 110:	84 e5       	ldi	r24, 0x54	; 84
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCDWriteFString>
 118:	84 ef       	ldi	r24, 0xF4	; 244
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	fe 01       	movw	r30, r28
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x72>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 122:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 124:	d9 f7       	brne	.-10     	; 0x11c <main+0x70>
	_delay_ms(50);
LCDClear();
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>
 12e:	ce cf       	rjmp	.-100    	; 0xcc <main+0x20>

00000130 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
 130:	87 b3       	in	r24, 0x17	; 23
 132:	80 7f       	andi	r24, 0xF0	; 240
 134:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
 136:	96 9a       	sbi	0x12, 6	; 18
	CLEAR_RS();		//Read status
 138:	93 98       	cbi	0x12, 3	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 140:	22 e0       	ldi	r18, 0x02	; 2
 142:	35 e0       	ldi	r19, 0x05	; 5
 144:	c4 9a       	sbi	0x18, 4	; 24
 146:	82 2f       	mov	r24, r18
 148:	8a 95       	dec	r24
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
 14c:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
 14e:	82 95       	swap	r24
 150:	80 7f       	andi	r24, 0xF0	; 240
 152:	92 2f       	mov	r25, r18
 154:	9a 95       	dec	r25
 156:	f1 f7       	brne	.-4      	; 0x154 <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 158:	c4 98       	cbi	0x18, 4	; 24
 15a:	93 2f       	mov	r25, r19
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
 160:	c4 9a       	sbi	0x18, 4	; 24
 162:	92 2f       	mov	r25, r18
 164:	9a 95       	dec	r25
 166:	f1 f7       	brne	.-4      	; 0x164 <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
 168:	96 b3       	in	r25, 0x16	; 22
 16a:	92 2f       	mov	r25, r18
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 170:	c4 98       	cbi	0x18, 4	; 24
 172:	93 2f       	mov	r25, r19
 174:	9a 95       	dec	r25
 176:	f1 f7       	brne	.-4      	; 0x174 <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 178:	87 fd       	sbrc	r24, 7
 17a:	e4 cf       	rjmp	.-56     	; 0x144 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 17c:	96 98       	cbi	0x12, 6	; 18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 17e:	87 b3       	in	r24, 0x17	; 23
 180:	8f 60       	ori	r24, 0x0F	; 15
 182:	87 bb       	out	0x17, r24	; 23

}
 184:	08 95       	ret

00000186 <LCDByte>:
#ifdef LCD_TYPE_202
	#define LCD_TYPE_204
#endif

void LCDByte(uint8_t c,uint8_t isdata)
{
 186:	28 2f       	mov	r18, r24
	uint8_t temp;

	hn=c>>4;
	ln=(c & 0x0F);

	if(isdata==0)
 188:	66 23       	and	r22, r22
 18a:	11 f4       	brne	.+4      	; 0x190 <LCDByte+0xa>
		CLEAR_RS();
 18c:	93 98       	cbi	0x12, 3	; 18
 18e:	01 c0       	rjmp	.+2      	; 0x192 <LCDByte+0xc>
	else
		SET_RS();
 190:	93 9a       	sbi	0x12, 3	; 18
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	8a 95       	dec	r24
 196:	f1 f7       	brne	.-4      	; 0x194 <LCDByte+0xe>

	_delay_us(0.500);		//tAS

	SET_E();
 198:	c4 9a       	sbi	0x18, 4	; 24

	//Send high nibble

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
 19a:	88 b3       	in	r24, 0x18	; 24
 19c:	92 2f       	mov	r25, r18
 19e:	92 95       	swap	r25
 1a0:	9f 70       	andi	r25, 0x0F	; 15
 1a2:	80 7f       	andi	r24, 0xF0	; 240
 1a4:	98 2b       	or	r25, r24
	LCD_DATA_PORT=temp;
 1a6:	98 bb       	out	0x18, r25	; 24
 1a8:	95 e0       	ldi	r25, 0x05	; 5
 1aa:	89 2f       	mov	r24, r25
 1ac:	8a 95       	dec	r24
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCDByte+0x26>

	_delay_us(1);			//tEH

	//Now data lines are stable pull E low for transmission

	CLEAR_E();
 1b0:	c4 98       	cbi	0x18, 4	; 24
 1b2:	89 2f       	mov	r24, r25
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCDByte+0x2e>

	_delay_us(1);

	//Send the lower nibble
	SET_E();
 1b8:	c4 9a       	sbi	0x18, 4	; 24

	temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
 1ba:	88 b3       	in	r24, 0x18	; 24
 1bc:	2f 70       	andi	r18, 0x0F	; 15
 1be:	80 7f       	andi	r24, 0xF0	; 240
 1c0:	82 2b       	or	r24, r18

	LCD_DATA_PORT=temp;
 1c2:	88 bb       	out	0x18, r24	; 24
 1c4:	89 2f       	mov	r24, r25
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LCDByte+0x40>

	_delay_us(1);			//tEH

	//SEND

	CLEAR_E();
 1ca:	c4 98       	cbi	0x18, 4	; 24
 1cc:	9a 95       	dec	r25
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <LCDByte+0x46>

	_delay_us(1);			//tEL

	LCDBusyLoop();
 1d0:	0e 94 98 00 	call	0x130	; 0x130 <LCDBusyLoop>
}
 1d4:	08 95       	ret

000001d6 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	18 2f       	mov	r17, r24
 1de:	88 ee       	ldi	r24, 0xE8	; 232
 1e0:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e2:	20 e9       	ldi	r18, 0x90	; 144
 1e4:	31 e0       	ldi	r19, 0x01	; 1
 1e6:	f9 01       	movw	r30, r18
 1e8:	31 97       	sbiw	r30, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <LCDInit+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ee:	d9 f7       	brne	.-10     	; 0x1e6 <LCDInit+0x10>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(100);
	
	//Clear Ports
	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 1f0:	88 b3       	in	r24, 0x18	; 24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	88 bb       	out	0x18, r24	; 24
	
	CLEAR_E();
 1f6:	c4 98       	cbi	0x18, 4	; 24
	CLEAR_RW();
 1f8:	96 98       	cbi	0x12, 6	; 18
	CLEAR_RS();
 1fa:	93 98       	cbi	0x12, 3	; 18
	
	//Set IO Ports direction
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);	//data line direction
 1fc:	87 b3       	in	r24, 0x17	; 23
 1fe:	8f 60       	ori	r24, 0x0F	; 15
 200:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);			//E line line direction
 202:	bc 9a       	sbi	0x17, 4	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);		//RS line direction
 204:	8b 9a       	sbi	0x11, 3	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);		//RW line direction
 206:	8e 9a       	sbi	0x11, 6	; 17
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	8a 95       	dec	r24
 20c:	f1 f7       	brne	.-4      	; 0x20a <LCDInit+0x34>
	//Reset sequence END
	
	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 20e:	c4 9a       	sbi	0x18, 4	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 210:	c1 9a       	sbi	0x18, 1	; 24
 212:	85 e0       	ldi	r24, 0x05	; 5
 214:	98 2f       	mov	r25, r24
 216:	9a 95       	dec	r25
 218:	f1 f7       	brne	.-4      	; 0x216 <LCDInit+0x40>
	_delay_us(1);
	CLEAR_E();
 21a:	c4 98       	cbi	0x18, 4	; 24
 21c:	8a 95       	dec	r24
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCDInit+0x46>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 220:	80 eb       	ldi	r24, 0xB0	; 176
 222:	94 e0       	ldi	r25, 0x04	; 4
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <LCDInit+0x4e>
	//LCDBusyLoop();                                    //[B] Forgot this delay
	_delay_us(300);

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 228:	88 e2       	ldi	r24, 0x28	; 40
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>
	LCDCmd(0b00001000|style);	//Display Off
 230:	81 2f       	mov	r24, r17
 232:	88 60       	ori	r24, 0x08	; 8
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>
	LCDCmd(0b00001100|style);	//Display On
 23a:	81 2f       	mov	r24, r17
 23c:	8c 60       	ori	r24, 0x0C	; 12
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 244:	80 e4       	ldi	r24, 0x40	; 64
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>
 24c:	c0 e6       	ldi	r28, 0x60	; 96
 24e:	d0 e0       	ldi	r29, 0x00	; 0

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 250:	89 91       	ld	r24, Y+
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	c0 3a       	cpi	r28, 0xA0	; 160
 25c:	d8 07       	cpc	r29, r24
 25e:	c1 f7       	brne	.-16     	; 0x250 <LCDInit+0x7a>
		LCDData(__cgram[__i]);
	
	LCDClear();
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>

}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	08 95       	ret

00000270 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	ec 01       	movw	r28, r24
 276:	10 c0       	rjmp	.+32     	; 0x298 <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
 278:	85 32       	cpi	r24, 0x25	; 37
 27a:	51 f4       	brne	.+20     	; 0x290 <LCDWriteString+0x20>
	{
		msg++;
 27c:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 27e:	88 81       	ld	r24, Y
 280:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 282:	88 30       	cpi	r24, 0x08	; 8
 284:	28 f0       	brcs	.+10     	; 0x290 <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 286:	85 e2       	ldi	r24, 0x25	; 37
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>
			LCDData(*msg);
 28e:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>
	}
	msg++;
 296:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 298:	88 81       	ld	r24, Y
 29a:	88 23       	and	r24, r24
 29c:	69 f7       	brne	.-38     	; 0x278 <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <LCDWriteFString>:

void LCDWriteFString(const char *msg)
{
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	ec 01       	movw	r28, r24
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 2ac:	fc 01       	movw	r30, r24
 2ae:	84 91       	lpm	r24, Z+
 2b0:	14 c0       	rjmp	.+40     	; 0x2da <LCDWriteFString+0x36>
 while(ch!='\0')
 {
 	//Custom Char Support
	if(ch=='%')
 2b2:	85 32       	cpi	r24, 0x25	; 37
 2b4:	61 f4       	brne	.+24     	; 0x2ce <LCDWriteFString+0x2a>
	{
		msg++;
 2b6:	21 96       	adiw	r28, 0x01	; 1
		
		ch=pgm_read_byte(msg);
 2b8:	fe 01       	movw	r30, r28
 2ba:	14 91       	lpm	r17, Z+
		
		int8_t cc=ch-'0';
 2bc:	81 2f       	mov	r24, r17
 2be:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 2c0:	88 30       	cpi	r24, 0x08	; 8
 2c2:	28 f0       	brcs	.+10     	; 0x2ce <LCDWriteFString+0x2a>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
 2c4:	85 e2       	ldi	r24, 0x25	; 37
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>
			LCDData(ch);
 2cc:	81 2f       	mov	r24, r17
		}
	}
	else
	{
		LCDData(ch);
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>
	}
	msg++;
 2d4:	21 96       	adiw	r28, 0x01	; 1
	ch=pgm_read_byte(msg);
 2d6:	fe 01       	movw	r30, r28
 2d8:	84 91       	lpm	r24, Z+


	*****************************************************************/
	
 char ch=pgm_read_byte(msg);
 while(ch!='\0')
 2da:	88 23       	and	r24, r24
 2dc:	51 f7       	brne	.-44     	; 0x2b2 <LCDWriteFString+0xe>
		LCDData(ch);
	}
	msg++;
	ch=pgm_read_byte(msg);
 }
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	08 95       	ret

000002e6 <LCDWriteInt>:

void LCDWriteInt(int val,int8_t field_length)
{
 2e6:	ef 92       	push	r14
 2e8:	ff 92       	push	r15
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	df 93       	push	r29
 2f0:	cf 93       	push	r28
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <LCDWriteInt+0xe>
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <LCDWriteInt+0x10>
 2f6:	0f 92       	push	r0
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	8c 01       	movw	r16, r24
 2fe:	f6 2e       	mov	r15, r22

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	
	//Handle negative integers
	if(val<0)
 300:	97 ff       	sbrs	r25, 7
 302:	08 c0       	rjmp	.+16     	; 0x314 <LCDWriteInt+0x2e>
	{
		LCDData('-');   //Write Negative sign
 304:	8d e2       	ldi	r24, 0x2D	; 45
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>
		val=val*-1;     //convert to positive
 30c:	10 95       	com	r17
 30e:	01 95       	neg	r16
 310:	1f 4f       	sbci	r17, 0xFF	; 255
 312:	04 c0       	rjmp	.+8      	; 0x31c <LCDWriteInt+0x36>
	}
	else
	{
		LCDData(' ');
 314:	80 e2       	ldi	r24, 0x20	; 32
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 31c:	fe 01       	movw	r30, r28
 31e:	31 96       	adiw	r30, 0x01	; 1
 320:	85 e0       	ldi	r24, 0x05	; 5
 322:	df 01       	movw	r26, r30
 324:	1d 92       	st	X+, r1
 326:	8a 95       	dec	r24
 328:	e9 f7       	brne	.-6      	; 0x324 <LCDWriteInt+0x3e>
 32a:	fe 01       	movw	r30, r28
 32c:	35 96       	adiw	r30, 0x05	; 5
 32e:	0d c0       	rjmp	.+26     	; 0x34a <LCDWriteInt+0x64>
		LCDData(' ');
	}
	
	while(val)
	{
		str[i]=val%10;
 330:	c8 01       	movw	r24, r16
 332:	6a e0       	ldi	r22, 0x0A	; 10
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__divmodhi4>
 33a:	80 83       	st	Z, r24
		val=val/10;
 33c:	c8 01       	movw	r24, r16
 33e:	6a e0       	ldi	r22, 0x0A	; 10
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__divmodhi4>
 346:	8b 01       	movw	r16, r22
 348:	31 97       	sbiw	r30, 0x01	; 1
	else
	{
		LCDData(' ');
	}
	
	while(val)
 34a:	01 15       	cp	r16, r1
 34c:	11 05       	cpc	r17, r1
 34e:	81 f7       	brne	.-32     	; 0x330 <LCDWriteInt+0x4a>
		str[i]=val%10;
		val=val/10;
		i--;
	}
	
	if(field_length==-1)
 350:	bf ef       	ldi	r27, 0xFF	; 255
 352:	fb 16       	cp	r15, r27
 354:	81 f4       	brne	.+32     	; 0x376 <LCDWriteInt+0x90>
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 35a:	ae 01       	movw	r20, r28
 35c:	4f 5f       	subi	r20, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	02 c0       	rjmp	.+4      	; 0x366 <LCDWriteInt+0x80>
 362:	2f 5f       	subi	r18, 0xFF	; 255
 364:	3f 4f       	sbci	r19, 0xFF	; 255
 366:	fa 01       	movw	r30, r20
 368:	e2 0f       	add	r30, r18
 36a:	f3 1f       	adc	r31, r19
 36c:	80 81       	ld	r24, Z
 36e:	88 23       	and	r24, r24
 370:	c1 f3       	breq	.-16     	; 0x362 <LCDWriteInt+0x7c>
 372:	89 01       	movw	r16, r18
 374:	08 c0       	rjmp	.+16     	; 0x386 <LCDWriteInt+0xa0>
	else
		j=5-field_length;
 376:	8f 2d       	mov	r24, r15
 378:	99 27       	eor	r25, r25
 37a:	87 fd       	sbrc	r24, 7
 37c:	90 95       	com	r25
 37e:	05 e0       	ldi	r16, 0x05	; 5
 380:	10 e0       	ldi	r17, 0x00	; 0
 382:	08 1b       	sub	r16, r24
 384:	19 0b       	sbc	r17, r25
 386:	7e 01       	movw	r14, r28
 388:	08 94       	sec
 38a:	e1 1c       	adc	r14, r1
 38c:	f1 1c       	adc	r15, r1
 38e:	e0 0e       	add	r14, r16
 390:	f1 1e       	adc	r15, r17
 392:	09 c0       	rjmp	.+18     	; 0x3a6 <LCDWriteInt+0xc0>

	for(i=j;i<5;i++)
	{
		LCDData('0'+str[i]);
 394:	f7 01       	movw	r30, r14
 396:	81 91       	ld	r24, Z+
 398:	7f 01       	movw	r14, r30
 39a:	80 5d       	subi	r24, 0xD0	; 208
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>
	if(field_length==-1)
		while(str[j]==0) j++;
	else
		j=5-field_length;

	for(i=j;i<5;i++)
 3a2:	0f 5f       	subi	r16, 0xFF	; 255
 3a4:	1f 4f       	sbci	r17, 0xFF	; 255
 3a6:	05 30       	cpi	r16, 0x05	; 5
 3a8:	11 05       	cpc	r17, r1
 3aa:	a4 f3       	brlt	.-24     	; 0x394 <LCDWriteInt+0xae>
	{
		LCDData('0'+str[i]);
	}
}
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	cf 91       	pop	r28
 3b8:	df 91       	pop	r29
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	ff 90       	pop	r15
 3c0:	ef 90       	pop	r14
 3c2:	08 95       	ret

000003c4 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 3c4:	84 31       	cpi	r24, 0x14	; 20
 3c6:	78 f4       	brcc	.+30     	; 0x3e6 <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 3c8:	62 30       	cpi	r22, 0x02	; 2
 3ca:	31 f0       	breq	.+12     	; 0x3d8 <LCDGotoXY+0x14>
 3cc:	63 30       	cpi	r22, 0x03	; 3
 3ce:	31 f0       	breq	.+12     	; 0x3dc <LCDGotoXY+0x18>
 3d0:	61 30       	cpi	r22, 0x01	; 1
 3d2:	29 f4       	brne	.+10     	; 0x3de <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 3d4:	80 64       	ori	r24, 0x40	; 64
 3d6:	03 c0       	rjmp	.+6      	; 0x3de <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
 3d8:	8c 5e       	subi	r24, 0xEC	; 236
 3da:	01 c0       	rjmp	.+2      	; 0x3de <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
 3dc:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 3de:	80 68       	ori	r24, 0x80	; 128
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	0e 94 c3 00 	call	0x186	; 0x186 <LCDByte>
 3e6:	08 95       	ret

000003e8 <__divmodhi4>:
 3e8:	97 fb       	bst	r25, 7
 3ea:	09 2e       	mov	r0, r25
 3ec:	07 26       	eor	r0, r23
 3ee:	0a d0       	rcall	.+20     	; 0x404 <__divmodhi4_neg1>
 3f0:	77 fd       	sbrc	r23, 7
 3f2:	04 d0       	rcall	.+8      	; 0x3fc <__divmodhi4_neg2>
 3f4:	0c d0       	rcall	.+24     	; 0x40e <__udivmodhi4>
 3f6:	06 d0       	rcall	.+12     	; 0x404 <__divmodhi4_neg1>
 3f8:	00 20       	and	r0, r0
 3fa:	1a f4       	brpl	.+6      	; 0x402 <__divmodhi4_exit>

000003fc <__divmodhi4_neg2>:
 3fc:	70 95       	com	r23
 3fe:	61 95       	neg	r22
 400:	7f 4f       	sbci	r23, 0xFF	; 255

00000402 <__divmodhi4_exit>:
 402:	08 95       	ret

00000404 <__divmodhi4_neg1>:
 404:	f6 f7       	brtc	.-4      	; 0x402 <__divmodhi4_exit>
 406:	90 95       	com	r25
 408:	81 95       	neg	r24
 40a:	9f 4f       	sbci	r25, 0xFF	; 255
 40c:	08 95       	ret

0000040e <__udivmodhi4>:
 40e:	aa 1b       	sub	r26, r26
 410:	bb 1b       	sub	r27, r27
 412:	51 e1       	ldi	r21, 0x11	; 17
 414:	07 c0       	rjmp	.+14     	; 0x424 <__udivmodhi4_ep>

00000416 <__udivmodhi4_loop>:
 416:	aa 1f       	adc	r26, r26
 418:	bb 1f       	adc	r27, r27
 41a:	a6 17       	cp	r26, r22
 41c:	b7 07       	cpc	r27, r23
 41e:	10 f0       	brcs	.+4      	; 0x424 <__udivmodhi4_ep>
 420:	a6 1b       	sub	r26, r22
 422:	b7 0b       	sbc	r27, r23

00000424 <__udivmodhi4_ep>:
 424:	88 1f       	adc	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	5a 95       	dec	r21
 42a:	a9 f7       	brne	.-22     	; 0x416 <__udivmodhi4_loop>
 42c:	80 95       	com	r24
 42e:	90 95       	com	r25
 430:	bc 01       	movw	r22, r24
 432:	cd 01       	movw	r24, r26
 434:	08 95       	ret

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>
